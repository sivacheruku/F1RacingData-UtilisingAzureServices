from typing_extensions import Annotated
import requests
from bs4 import BeautifulSoup
import autogen
from autogen.cache import Cache

# config_list = autogen.config_list_from_json(
#     "OAI_CONFIG_LIST",
#     filter_dict={"tags": ["gemini", "tool"]}
# )
config_list = [
    {
        'model': 'gemini-1.5-pro',
        'api_key': 'AIzaSyA2zXT6GX0MMi7mCj1er-6B9FJNssfZ1kA',
        'api_type': 'google',
        'tags': ['tool', 'gemini'],
    },
    {
        'model': 'gemini-1.5-flash',
        'api_key': 'AIzaSyA2zXT6GX0MMi7mCj1er-6B9FJNssfZ1kA',
        'api_type': 'google',
        'tags': ['tool', 'gemini'],
    }
]

llm_config = {
    "config_list": config_list,
    "timeout": 120,
}
chatbot = autogen.AssistantAgent(
    name="chatbot",
    system_message="For coding tasks, only use the functions you have been provided with. Reply TERMINATE when the task is done.",
    llm_config=llm_config,
)

# create a UserProxyAgent instance named "user_proxy"
user_proxy = autogen.UserProxyAgent(
    name="user_proxy",
    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),
    human_input_mode="NEVER",
    max_consecutive_auto_reply=10,
    code_execution_config={
        "work_dir": "coding",
        "use_docker": False,
    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.
)


# define functions according to the function description


# one way of registering functions is to use the register_for_llm and register_for_execution decorators
@user_proxy.register_for_execution()
@chatbot.register_for_llm(name="python", description="print out the titles and URLs of datasets listed on the main dataset catalog page")
def list_datasets(url: Annotated[str, "Valid url to request/ scrape data frm"]) -> str:
    print(1000*"-")
    print("list_datasets is being called")
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    result = ""

    for dataset in soup.find_all('h3', class_='dataset-heading'):
        a_tag = dataset.find('a')
        title = a_tag.text.strip()
        link = a_tag['href']
        result = result + f"\nTitle: {title}\nLink: {link}\n"
    return result
# def exec_python(cell: Annotated[str, "Valid Python cell to execute."]) -> str:
#     ipython = get_ipython()
#     result = ipython.run_cell(cell)
#     log = str(result.result)
#     if result.error_before_exec is not None:
#         log += f"\n{result.error_before_exec}"
#     if result.error_in_exec is not None:
#         log += f"\n{result.error_in_exec}"
#     return log


# another way of registering functions is to use the register_function
def exec_sh(script: Annotated[str, "Valid Python cell to execute."]) -> str:
    return user_proxy.execute_code_blocks([("sh", script)])


autogen.agentchat.register_function(
    list_datasets,
    caller=chatbot,
    executor=user_proxy,
    name="sh",
    description="run a shell script and return the execution result.",
)

with Cache.disk() as cache:
    # start the conversation
    user_proxy.initiate_chat(
        chatbot,
        message="Run the 'list_datasets' function and tell me which datasets would be useful for someone who wants to write an article about public health 'https://catalog.data.gov/dataset' is the url",
        cache=cache,
        max_turns=3,
    )
